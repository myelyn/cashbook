import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import classnames from 'classnames/dedupe';
import createFromIconfont from './IconFont';
var INNER_SVG_PROPS = {
  width: '1em',
  height: '1em',
  fill: 'currentColor',
  viewBox: '0 0 32 32'
};
var Icon = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classnames;

  var className = props.className,
      type = props.type,
      style = props.style,
      prefixCls = props.prefixCls,
      theme = props.theme,
      size = props.size,
      children = props.children,
      SvgComponent = props.component,
      viewBox = props.viewBox,
      rest = _objectWithoutProperties(props, ["className", "type", "style", "prefixCls", "theme", "size", "children", "component", "viewBox"]);

  var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(type), !!type), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _classnames));

  var newProps = _objectSpread({
    className: cls,
    style: style,
    type: type,
    theme: theme,
    size: size
  }, rest); // svg component > children by iconfont > type


  if (SvgComponent) {
    INNER_SVG_PROPS.viewBox = viewBox;
    return /*#__PURE__*/React.createElement("i", _extends({}, newProps, {
      ref: ref
    }), /*#__PURE__*/React.createElement(SvgComponent, INNER_SVG_PROPS, children));
  }

  if (children) {
    return /*#__PURE__*/React.createElement("i", _extends({}, newProps, {
      ref: ref
    }), /*#__PURE__*/React.createElement("svg", INNER_SVG_PROPS, children));
  }

  if (type) {
    var MyIcon = createFromIconfont('//at.alicdn.com/t/font_1285036_9ze0vm44z57.js'); // generated by iconfont.cn

    return /*#__PURE__*/React.createElement(MyIcon, newProps);
  }

  return null;
});
Icon.createFromIconfont = createFromIconfont;
Icon.displayName = 'Icon';
Icon.defaultProps = {
  prefixCls: 'za-icon',
  theme: 'default',
  size: 'md',
  viewBox: INNER_SVG_PROPS.viewBox
};
export default Icon;